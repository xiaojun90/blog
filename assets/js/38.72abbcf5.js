(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{154:function(_,v,t){"use strict";t.r(v);var a=t(0),l=Object(a.a)({},function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"_31-可扩展架构的基本思想和模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-可扩展架构的基本思想和模式","aria-hidden":"true"}},[_._v("#")]),_._v(" 31-可扩展架构的基本思想和模式")]),_._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[_._v("#")]),_._v(" 前言")]),_._v(" "),t("p",[_._v("软件系统与硬件和建筑系统的最大差异就在于软件是可扩展的，而硬件和建筑是不可扩展的。一个硬件生产出来后是不会做修改的，建筑也是一样。")]),_._v(" "),t("p",[_._v("软件系统的这种可扩展性，即是其魅力，也是其难点。其魅力在于我们可以不断的到软件进行扩展，让软件系统拥有更多的功能和特性，满足新的需求或者顺应技术发展的趋势。难点在于如何用最小的代价去扩展系统，改动的越多，投入也越大，出错的可能性也越大。")]),_._v(" "),t("h2",{attrs:{id:"可扩展的基本思想"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可扩展的基本思想","aria-hidden":"true"}},[_._v("#")]),_._v(" 可扩展的基本思想")]),_._v(" "),t("p",[_._v("可扩展的基本思想可以总结为一个字："),t("strong",[_._v("拆")]),_._v("。")]),_._v(" "),t("p",[_._v("拆就是把原先大一统的系统拆分成多个规模小的部分，扩展时只修改其中一部分即可，无需整个系统到处修改，通过这种方式来减小修改的范围，从而减少风险。")]),_._v(" "),t("p",[_._v("按照不同的思路来拆分系统，就会得到不同的架构。常见的拆分思路有：")]),_._v(" "),t("ul",[t("li",[_._v("面向流程拆分：将整个业务系统拆分成几个阶段，每个阶段作为一部分。")]),_._v(" "),t("li",[_._v("面向服务拆分：将系统提供的服务进行拆分，每个服务作为一部分。")]),_._v(" "),t("li",[_._v("面向功能拆分：将系统提供的功能进行拆分，每个功能作为一部分。")])]),_._v(" "),t("p",[_._v("从范围来看，流程>服务>功能。")]),_._v(" "),t("p",[_._v("以一个学生信息管理系统为例：")]),_._v(" "),t("ul",[t("li",[_._v("面向流程拆分：\n展示层->业务层->数据层->存储层\n"),t("ul",[t("li",[_._v("展示层：负责用户业务设计，不同的业务展示不同的页面。")]),_._v(" "),t("li",[_._v("业务层：负责具体业务的处理。")]),_._v(" "),t("li",[_._v("数据层：负责完成数据的访问。")]),_._v(" "),t("li",[_._v("存储层：负责数据的存储。")])])]),_._v(" "),t("li",[_._v("面向服务的拆分：\n将系统拆分成注册、登录、信息管理、安全设置等服务。")]),_._v(" "),t("li",[_._v("面向功能的拆分：\n可以对每个服务进行更细粒度的拆分，拆分成各个功能。例如注册服务可以包含多种方式的注册。")])]),_._v(" "),t("p",[t("strong",[_._v("不同的拆分方式，本质是决定了系统的可扩展方式")]),_._v("。")]),_._v(" "),t("h2",{attrs:{id:"可扩展方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可扩展方式","aria-hidden":"true"}},[_._v("#")]),_._v(" 可扩展方式")]),_._v(" "),t("p",[_._v("不同的拆分方式对应扩展时的优势：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("面向流程的拆分：")]),_._v(" "),t("p",[_._v("扩展时大部分时候只需要修改某一层，少部分情况下可能需要修改关联的二层，不会出现所有的层都要同时修改。如我们将存储层从mysql扩展到mysql和oracle，只需要修改存储层和数据层即可。")])]),_._v(" "),t("li",[t("p",[_._v("面向服务的拆分：")]),_._v(" "),t("p",[_._v("对某个服务进行扩展时，或者要增加新的功能时，只需要扩展相关服务即可，无需修改所有的服务。")])]),_._v(" "),t("li",[t("p",[_._v("面向功能的拆分：\n对某个功能进行扩展时，或者要增加新的功能时，只需要扩展要关的功能即可，无需修改所有的功能。")])])]),_._v(" "),t("p",[_._v("不同的拆分方式将得到不以有架构：")]),_._v(" "),t("ul",[t("li",[_._v("面向流程的拆分：分层架构")]),_._v(" "),t("li",[_._v("面向服务的拆分：SOA、微服务")]),_._v(" "),t("li",[_._v("面向功能的拆分：微内核架构")])]),_._v(" "),t("p",[t("strong",[_._v("要注意的是：这一个架构不是非此即彼的关系，是可以组合使用的")]),_._v("。以学生管理系统为例：架构可以是这样子的：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("整体是采用面向服务架构中的微服务架构：拆分成注册服务、登录服务等，每个服务是一个独立运行的子系统。")])]),_._v(" "),t("li",[t("p",[_._v("其中注册服务本身又是面向流程的拆分")])]),_._v(" "),t("li",[t("p",[_._v("登录服务采用面向功能拆分的微内核架构")])])]),_._v(" "),t("Valine")],1)},[],!1,null,null,null);v.default=l.exports}}]);